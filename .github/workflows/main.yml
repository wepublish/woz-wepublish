name: CD

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: wepublish-269314
      GCLOUD_AUTH: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_WEPUBLISH }}
    steps:
      - uses: actions/checkout@v1
      - name: Build docker media
        run: |
          # https://cloud.google.com/container-registry/docs/advanced-authentication
          printenv GCLOUD_AUTH | base64 --decode | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker pull eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/media:latest
          docker build --cache-from eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/media:latest -t eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/media:${GITHUB_SHA} -t eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/media:latest ./media
          docker push eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/media:${GITHUB_SHA}
          docker push eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/media:latest
      - name: Build docker api
        run: |
          # https://cloud.google.com/container-registry/docs/advanced-authentication
          printenv GCLOUD_AUTH | base64 --decode | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker pull eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/api:latest
          docker build --cache-from eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/api:latest -t eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/api:${GITHUB_SHA} -t eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/api:latest ./api
          docker push eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/api:${GITHUB_SHA}
          docker push eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/api:latest
      - name: Build docker website
        run: |
          # https://cloud.google.com/container-registry/docs/advanced-authentication
          printenv GCLOUD_AUTH | base64 --decode | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker pull eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/website:latest
          docker build --cache-from eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/website:latest -t eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/website:${GITHUB_SHA} -t eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/website:latest ./website
          docker push eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/website:${GITHUB_SHA}
          docker push eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/website:latest
      - name: Build docker editor
        run: |
          # https://cloud.google.com/container-registry/docs/advanced-authentication
          printenv GCLOUD_AUTH | base64 --decode | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker pull eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/editor:latest
          docker build --cache-from eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/editor:latest -t eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/editor:${GITHUB_SHA} -t eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/editor:latest ./editor
          docker push eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/editor:${GITHUB_SHA}
          docker push eu.gcr.io/${PROJECT_ID}/${GITHUB_REPOSITORY}/editor:latest
      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Create manifest
        run: |
          node ./config/create-gke-manifest.js
          ls -al ./kubernetesConfigs
      - name: Prepare and authenticate kubectl
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: tsri-django
          location: europe-west6-c
          project_id: tsri-246213
          credentials: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_TSRI }}
      - name: Deploy to kubernetes
        run: kubectl apply -f ./kubernetesConfigs
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: dev
          SLACK_COLOR: '#3278BD'
          SLACK_ICON: https://github.com/wepublish.png?size=48
          SLACK_MESSAGE: 'Deploy to Kubernetes done!'
          SLACK_TITLE: 'Deploy'
          SLACK_USERNAME: 'Github (woz-wepublish)'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
